---
title: Gobot - Servo Driver
author: The Hybrid Group
page_title: Drivers
page_subtitle: Gobot has a extensible system for connecting to hardware devices.
page_title_docs: Servo
page_subtitle_docs: Driver
page_title_show: true
layout: documentation
subnav_driver: true
subnav_circuit_driver: true
active_menu_docs: true
subnavjs: true
---

%section.intro
  = image_tag "/images/devices/servo.jpg", class: "display"

.info-intro
  %p Provides an interface for making servos easy to work and interact with from Gobot.
  %a{ :href => "http://godoc.org/gobot.io/x/gobot/drivers/gpio#ServoDriver", :class => "api-link", :target => "_blank"} API Reference
.clear

%section.how-to#HowToConnect
  %h2 How To Connect
  :markdown
    Install the package with: `go get gobot.io/x/gobot`

  %h3 For Arduino:
  :markdown
        :::go
        package main

        import (
          "gobot.io/x/gobot"
          "gobot.io/x/gobot/drivers/gpio"
          "gobot.io/x/gobot/platforms/firmata"
        )

        func main() {

          fa := firmata.NewAdaptor("/dev/ttyACM0")
          servo := gpio.NewServoDriver(fa, "2")

          work := func() {
            servo.Center()
          }
          robot := gobot.NewRobot("servo",
            []gobot.Connection{fa},
            []gobot.Device{servo},
            work,
          )

          robot.Start()
        }


%section.how-to#HowToUse
  %h2 How To Use
  %p
    This example moves a servo from a random angle.

  %h3 Example
  :markdown
        :::go
        package main

        import (
          "math/rand"
          
          "gobot.io/x/gobot"
          "gobot.io/x/gobot/drivers/gpio"
          "gobot.io/x/gobot/platforms/firmata"
        )

        func main() {

          fa := firmata.NewAdaptor("/dev/ttyACM0")
          servo := gpio.NewServoDriver(fa, "2")

          work := func() {
                servo.Center()
                time.Sleep(500*time.Millisecond)
                
                gobot.Every(1*time.Second, func() {
                    d := rand.Intn(100)
                    servo.Move(uint8(d))
                })
           
          }
          robot := gobot.NewRobot("servo",
            []gobot.Connection{fa},
            []gobot.Device{servo},
            work,
          )

          robot.Start()
        }

%section.circuit#Circuit
  %h2 Circuit
  .description-circuit
    %p
  .image-circuit
    %img{:src => "/documentation/drivers/breadboards/gpio/servo_bb.png", :alt => ""}/
  .clear

%section.Compatibility.hardware#Compatibility
  %h2 Compatibility
  .devices
    = partial "/partials/platforms_for_driver", locals: { driver: "Servo" }
