---
title: Gobot Core
author: The Hybrid Group
page_title: Core
page_subtitle: Components that make up Gobot's Core.
layout: documentation
page_title_show: true
active_menu_docs: true
---

.api
  :markdown
    # API

    Gobot includes a RESTful API to query the status of any robot running within
    a group, including the connection and device status, and execute device
    commands.

    To activate the API, import the `gobot.io/x/gobot/api` package
    and instantiate the `API` like this:

        :::go
        mbot := gobot.NewMaster()
        api.NewAPI(mbot).Start()

    You can also specify the api host and port, and turn on authentication:

        :::go
        mbot := gobot.NewMaster()
        server := api.NewAPI(mbot)
        server.AddHandler(api.BasicAuth("gort", "klaatu"))
        server.Port = "3000"
        server.Start()

    You may access the [robeaux][] React.js interface with Gobot by navigating to `http://localhost:3000/`.

    [robeaux]: https://github.com/hybridgroup/robeaux

    ### Routes

    The Gobot API conforms to the [cppp.io spec](https://github.com/hybridgroup/cppp-io/blob/master/specification.markdown).

    ### Example

    The following code example will spin up an API server with two custom commands and a middleware handler:

        :::go
        package main

        import (
          "fmt"
          "html"
          "net/http"

          "gobot.io/x/gobot"
          "gobot.io/x/gobot/api"
        )

        func main() {
          mbot := gobot.NewMaster()

          a := api.NewAPI(mbot)
          a.AddHandler(func(w http.ResponseWriter, r *http.Request) {
            fmt.Fprintf(w, "Hello, %q \n", html.EscapeString(r.URL.Path))
          })
          a.Debug()
          a.Start()

          mbot.AddCommand("custom_gobot_command",
            func(params map[string]interface{}) interface{} {
              return "This command is attached to the mcp!"
            })

          hello := mbot.AddRobot(gobot.NewRobot("hello"))

          hello.AddCommand("hi_there", func(params map[string]interface{}) interface{} {
            return fmt.Sprintf("This command is attached to the robot %v", hello.Name)
          })

          mbot.Start()
        }
